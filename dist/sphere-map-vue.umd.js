(function(d,a){typeof exports=="object"&&typeof module<"u"?a(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],a):(d=typeof globalThis<"u"?globalThis:d||self,a(d["shpere-map-vue"]={},d.Vue))})(this,function(d,a){"use strict";const k="https://api.sphere.gistda.or.th/map/",g={apiKey:null,src:null,debug:!1,loaded:null,scriptReady:null,prepare:function({apiKey:l=null,src:r=null,debug:e=!1,loaded:n=null}){if(!(typeof window>"u")){if(window.sphere){console.warn("sphere Map Vue: sphere Map API is already loaded");return}this.apiKey=l,this.src=r||k,this.debug=e,this.loaded=n}},loadScript:function(){if(this.scriptReady!==null)return;let l=this.src,r={};this.apiKey&&(r.key=this.apiKey),this.debug&&(r.debug=!0);const e=new URLSearchParams(r);e&&(l+=`?${e}`),this.scriptReady=new Promise((n,i)=>{let u=document.createElement("script");u.onload=()=>{this.loaded&&typeof this.loaded=="function"&&this.loaded(window.sphere),n()},u.onerror=()=>{i()},u.async=!0,u.src=l,document.body.appendChild(u)})}},S={__name:"Map",props:{projection:{type:String,default:null},layer:{type:Array,default:null},zoom:{type:Number,default:null},zoomRange:{type:Object,default:null},location:{type:Object,default:null},ui:{type:String,default:null},input:{type:Boolean,default:null},autoResize:{type:Boolean,default:null},lastView:{type:Boolean,default:null},smoothZoom:{type:Boolean,default:null},language:{type:String,default:null}},emits:["load"],setup(l,{emit:r}){g.loadScript();const e=l;let n=null,i=!1;const u=a.ref(null),t=new Promise((s,y)=>{(function w(M=0){if(i){s(n);return}else if(M===3e4){y("sphere Map Vue: Cannot create sphere Map instance");return}setTimeout(()=>{w(M)},10),M+=10})()}),c=r;a.provide("mapReady",t);function o(){if(typeof window.sphere!="object"){console.error("sphere Map Vue: sphere Map API is not found");return}let s=p();s.placeholder=u.value,n=new window.sphere.Map(s),s.zoomRange&&n.zoomRange(s.zoomRange),n.Event.bind("ready",()=>{i=!0,c("load",n)})}function p(){const s={};for(const y in e)e[y]!==null&&(y==="projection"?s.projection=window.sphere.Projections[e.projection]:y==="layer"?s.layer=f(e.layer):y==="ui"?s.ui=window.sphere.UiComponent[e.ui]:s[y]=e[y]);return s}function f(s){let y=[];for(let w of s)y.push(window.sphere.Layers[w]);return y}return a.onMounted(()=>{g.scriptReady.then(()=>{o()})}),(s,y)=>(a.openBlock(),a.createElementBlock("div",null,[a.createElementVNode("div",{style:{width:"100%",height:"100%"},ref_key:"placeholder",ref:u},[a.renderSlot(s.$slots,"default")],512)]))}},b={__name:"Marker",props:{location:{type:Object,default:null},title:{type:String,default:null},icon:{type:Object,default:null},detail:{type:String,default:null},popup:{type:Object,default:null},visibleRange:{type:Object,default:null},clickable:{type:Boolean,default:null},draggable:{type:Boolean,default:null},weight:{type:String,default:null},rotate:{type:Number,default:null},iconStyle:{type:String,default:null}},emits:["add"],setup(l,{emit:r}){let e=null,n=null;const i=a.inject("mapReady",null),u=r,t=l;function c(){const p={};for(const f in t)if(t[f]!==null)if(f==="weight"){let s=window.sphere.OverlayWeight[t.weight];s&&(p.weight=s)}else f==="iconStyle"?p.style=t.iconStyle:p[f]=t[f];return p}function o(p,f){n=new window.sphere.Marker(p,f),e==null||e.Overlays.add(n),u("add",n)}return i===null&&(console.error("sphere Map Vue: sphere Map component is not ready"),returnw),i.then(p=>{if(e=p,!t.location||isNaN(t.location.lat)||isNaN(t.location.lon)){console.error("sphere Map Vue: Invalid marker location");return}o(t.location,c())}).catch(p=>{console.error(p)}),a.onUnmounted(()=>{e==null||e.Overlays.remove(n)}),()=>{}}};function h(){return{location:{type:[Object,Array],default:null},radius:{type:Number,default:null},size:{type:[Number,Object],default:null},title:{type:String,default:null},detail:{type:String,default:null},label:{type:[String,Boolean],default:null},labelOptions:{type:Object,default:null},popup:{type:Object,default:null},visibleRange:{type:Object,default:null},lineWidth:{type:Number,default:null},lineColor:{type:String,default:null},fillColor:{type:String,default:null},lineStyle:{type:String,default:null},pivot:{type:Object,default:null},clickable:{type:Boolean,default:null},editable:{type:Boolean,default:null},pointer:{type:Boolean,default:null},draggable:{type:Boolean,default:null},rotatable:{type:Boolean,default:null},weight:{type:String,default:null},texture:{type:String,default:null},textureAlpha:{type:Number,default:null},linePattern:{type:String,default:null}}}function m(l){const r={};for(let e in l)if(l[e]!==null)if(e==="weight"){let n=window.sphere.OverlayWeight[l.weight];n&&(r.weight=n)}else e==="lineStyle"?r.lineStyle=window.sphere.LineStyle[l.lineStyle]:r[e]=l[e];return r}const O={__name:"Polyline",props:h(),emits:["add"],setup(l,{emit:r}){let e=null,n=null;const i=a.inject("mapReady",null),u=r,t=l;function c(o,p){n=new window.sphere.Polyline(o,p),e==null||e.Overlays.add(n),u("add",n)}return(()=>{if(i===null){console.error("sphere Map Vue: Gistda sphere Map component is not ready");return}i.then(o=>{if(e=o,!t.location){console.error("sphere Map Vue: Invalid polyline location");return}c(t.location,m(t))}).catch(o=>{console.error(o)})})(),a.onUnmounted(()=>{e==null||e.Overlays.remove(n)}),()=>{}}},_={__name:"Polygon",props:h(),emits:["add"],setup(l,{emit:r}){let e=null,n=null;const i=a.inject("mapReady",null),u=r,t=l;function c(o,p){n=new window.sphere.Polygon(o,p),e==null||e.Overlays.add(n),u("add",n)}return(()=>{if(i===null){console.error("sphere Map Vue: Gistda sphere Map component is not ready");return}i.then(o=>{if(e=o,!t.location){console.error("sphere Map Vue: Invalid polygon location");return}c(t.location,m(t))}).catch(o=>{console.error(o)})})(),a.onUnmounted(()=>{e==null||e.Overlays.remove(n)}),()=>{}}},v={__name:"Circle",props:h(),emits:["add"],setup(l,{emit:r}){let e=null,n=null;const i=a.inject("mapReady",null),u=r,t=l;function c(o,p,f){n=new window.sphere.Circle(o,p,f),e==null||e.Overlays.add(n),u("add",n)}return(()=>{if(i===null){console.error("sphere Map Vue: Gistda sphere map component is not ready");return}i.then(o=>{if(e=o,!t.location){console.error("sphere Map Vue: Invalid circle location");return}if(!t.radius||isNaN(t.radius)){console.error("sphere Map Vue: Invalid circle radius");return}c(t.location,t.radius,m(t))}).catch(o=>{console.error(o)})})(),a.onUnmounted(()=>{e.Overlays.remove(n)}),()=>{}}},R={__name:"Dot",props:h(),emits:["add"],setup(l,{emit:r}){let e=null,n=null;const i=a.inject("mapReady",null),u=r,t=l;function c(o,p){n=new window.sphere.Dot(o,p),e==null||e.Overlays.add(n),u("add",n)}return(()=>{if(i===null){console.error("sphere Map Vue: Gistda sphere map component is not ready");return}i.then(o=>{if(e=o,!t.location){console.error("sphere Map Vue: Invalid dot location");return}c(t.location,m(t))}).catch(o=>{console.error(o)})})(),a.onUnmounted(()=>{e==null||e.Overlays.remove(n)}),()=>{}}},j={__name:"Rectangle",props:h(),emits:["add"],setup(l,{emit:r}){let e=null,n=null;const i=a.inject("mapReady",null),u=r,t=l;function c(o,p){n=new window.sphere.Rectangle(o,p),e==null||e.Overlays.add(n),u("add",n)}return(()=>{if(i===null){console.error("sphere Map Vue: Gistda sphere Map component is not ready");return}i.then(o=>{if(e=o,!t.location){console.error("sphere Map Vue: Invalid rectangle location");return}if(!t.size){console.error("sphere Map Vue: Invalid rectangle size");return}c(t.location,t.size,m(t))}).catch(o=>{console.error(o)})})(),a.onUnmounted(()=>{e.Overlays.remove(n)}),()=>{}}},P=l=>{g.prepare(l)},V={install(l,r){r.load&&P(r.load),l.component("SphereMap",S),l.component("SphereMapMarker",b),l.component("SphereMapPolyline",O),l.component("SphereMapPolygon",_),l.component("SphereMapCircle",v),l.component("SphereMapDot",R),l.component("SphereMapRectangle",j)}};d.SphereMap=S,d.SphereMapCircle=v,d.SphereMapDot=R,d.SphereMapLoad=P,d.SphereMapMarker=b,d.SphereMapPolygon=_,d.SphereMapPolyline=O,d.SphereMapRectangle=j,d.default=V,Object.defineProperties(d,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
